{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CodeCAD - Parametric CAD with Lua","text":"<p>CodeCAD is a modern, code-driven CAD system designed for makers, engineers, and researchers who want simplicity, power, and reproducibility in 3D modeling.</p> <p>Instead of clicking through menus, you describe your parts in clean Lua code. Models live in plain text, can be versioned with Git, and preview instantly in the built-in viewer.</p> <p>Think of CodeCAD as a catalyst: a tool that transforms your ideas into real-world objects \u2014 whether for 3D printing, woodworking, metalworking, or larger construction projects. Its workflow is designed to be as frictionless and direct as possible.</p>"},{"location":"#why-codecad","title":"Why CodeCAD?","text":"<ul> <li>\u2728 Simplicity first \u2013 Minimal API, easy to learn. A box in just one line of code.</li> <li>\u26a1 Frictionless workflow \u2013 Edit Lua \u2192 see your model update live.</li> <li>\ud83d\udee0\ufe0f Industrial kernel \u2013 Built on OpenCascade (OCCT), a proven geometry engine for serious CAD.</li> <li>\ud83d\udcbe Reproducible \u2013 Everything is text-based and versionable. Git is your history of design.</li> <li>\ud83c\udfaf Developer-friendly \u2013 If you can program, you can model. Treat CAD like software engineering.</li> <li>\ud83d\udcdd Editor freedom \u2013 Works great in any text editor; optimized for neovim.</li> </ul>"},{"location":"#why-lua","title":"Why Lua?","text":"<ul> <li>\ud83d\udc1a Small, clean, embeddable scripting language.</li> <li>\ud83d\udce6 No dependencies, works everywhere.</li> <li>\ud83e\udde9 Concise enough to act like a DSL, but still a real programming language.</li> </ul> <p>With Lua, you describe parts with code that is easy to read, easy to share, and easy to maintain.</p> <p>\ud83d\ude80 Code your designs. Print your ideas.</p>"},{"location":"#who-is-codecad-for","title":"Who is CodeCAD for?","text":"<ul> <li>\ud83e\uddd1\u200d\ud83d\udd27 Makers \u2013 Design printable parts and assemblies faster.</li> <li>\ud83c\udfed Engineers \u2013 Prototype mechanisms, gears, bolts, and housings parametrically.</li> <li>\ud83d\udd2c Researchers \u2013 Explore geometry and manufacturing processes in a programmable, reproducible way.</li> <li>\ud83d\udd2c Software developers \u2013 Apply software engineering mindset to CAD modeling.</li> </ul> <p>\ud83d\udca1 With CodeCAD, you\u2019re not just designing parts \u2013 you\u2019re writing the blueprint of your ideas.</p>"},{"location":"_structure/","title":"structure","text":"<p>\ud83d\udcd6 CodeCAD Documentation Structure</p> <ol> <li> <p>Introduction    \u2022 What is CodeCAD?    \u2022 Why code-based CAD?    \u2022 Key benefits: parametric design, adaptability, reproducibility.    \u2022 Comparison to GUI-based CAD tools.</p> </li> <li> <p>Getting Started    \u2022 Installation (CLI, viewer, lab).    \u2022 First run: generating a simple model.    \u2022 Basic workflow: write Lua \u2192 preview \u2192 export.</p> </li> <li> <p>Design Principles    \u2022 From idea to part: Observe \u2192 Think \u2192 Sketch \u2192 Measure \u2192 Code.    \u2022 Parametric modeling mindset.    \u2022 When to sketch on paper vs. when to go straight into CodeCAD.    \u2022 Iteration and adaptability (change a parameter \u2192 regenerate).</p> </li> <li> <p>CodeCAD in Practice    \u2022 CodeCAD project structure (explain the project.json file) can have material, parts, meta ...    \u2022 From idea to physical part: this should contain a real world example of two parts with different material    \u2022 View with live viewer (link to viewer section)    \u2022 Export to 3D printing (STL) with <code>ccad build</code>    \u2022 Export to construction/manufacturing (STEP). <code>save_step</code>    \u2022 Keeping designs adaptable and reusable.</p> </li> <li> <p>Core Functionality</p> </li> </ol> <p>Grouped by functional \u201cpackages,\u201d with examples for each function: \u2022 Primitives (box, cylinder, sphere, \u2026) \u2022 Curves &amp; Sketch (poly_xy, rect, profile_xz, \u2026) \u2022 Transforms (translate, rotate_x, scale, \u2026) \u2022 Booleans / Operations (union, difference, intersection) \u2022 Features (fillet_all, chamfer_all, threaded_rod, \u2026) \u2022 Mechanical helpers (pipe_adapter, wedge, \u2026) \u2022 Measure &amp; Utilities (bbox, dimensions, tolerances) \u2022 IO / Workflow (emit, save_stl, save_step) \u2022 Selection &amp; Advanced usage</p> <p>\ud83d\udc49 Each function should include: short explanation + Lua example + small rendering screenshot.</p> <ol> <li> <p>Architecture    \u2022 Kernel (OpenCascade foundations).    \u2022 Lua layer (scripting and API).    \u2022 CodeCAD CLI (ccad) \u2013 generating and exporting models.    \u2022 CodeCAD Lab \u2013 interactive environment.</p> </li> <li> <p>Viewer    \u2022 Interface overview.    \u2022 Shortcuts &amp; navigation.    \u2022 Features (layer visibility, measurement tools, section cuts, etc.).    \u2022 Export and integration into workflows.</p> </li> <li> <p>Tutorials &amp; Examples    \u2022 Beginner: making a parametric box with a hole.    \u2022 Intermediate: designing a gear with threaded_rod and Boolean cuts.    \u2022 Advanced: assembly of multiple parametric parts.    \u2022 Real-world workflows:    \u2022 3D-printable brackets.    \u2022 Furniture joints.    \u2022 Mechanical adapters.</p> </li> <li> <p>API Reference    \u2022 Full Lua API, grouped by package.    \u2022 Function signatures, arguments, and defaults.    \u2022 Links to example snippets.</p> </li> <li> <p>CodeCAD Library     \u2022 The additional library</p> </li> <li> <p>Cheatsheet     \u2022 One-page overview of primitives, transforms, operations.     \u2022 Exportable as PDF for quick desk reference.</p> </li> <li> <p>Glossary (optional but useful)     \u2022 Engineering &amp; CAD terminology (your German-English table fits here).     \u2022 Quick definitions for newcomers.</p> </li> </ol>"},{"location":"core_boolean/","title":"Boolean Operations","text":"<p>Boolean operations are the foundation of constructive solid geometry (CSG). They allow you to combine or subtract shapes to build complex parts from simple building blocks. In CodeCAD, Booleans work on any solid Shape.</p>"},{"location":"core_boolean/#uniona-b","title":"union(a, b, ...)","text":"<p>Merges two or more solids into a single shape. This is equivalent to a logical OR.</p> <pre><code>-- Two overlapping boxes fused together\nlocal a = box(20, 20, 20)\nlocal b = box(20, 20, 20)\nb = translate(b, 10, 0, 0)\nemit(union(a, b))\n</code></pre>"},{"location":"core_boolean/#parameters","title":"Parameters","text":"<ul> <li>a: Shape</li> <li>b: Shape</li> <li>...: additional Shapes (optional)</li> <li>Returns Shape \u2014 the combined solid.</li> </ul> <p>Use case: Build a larger part from smaller modules (e.g., base plate + reinforcement ribs). You can also union not intersecting parts in order to build groups.</p>"},{"location":"core_boolean/#differencea-b","title":"difference(a, b)","text":"<p>Subtracts shape b from a. The result is A minus B.</p> <pre><code>-- A box with a cylindrical hole\nlocal base = box(40, 40, 20)\nlocal hole = cylinder(8, 20)\nhole = translate(hole, 20, 20, 0)\nemit(difference(base, hole))\n</code></pre>"},{"location":"core_boolean/#parameters_1","title":"Parameters","text":"<ul> <li>a: Shape \u2014 the main solid (minuend).</li> <li>b: Shape \u2014 the cutting solid (subtrahend).</li> <li>Returns Shape \u2014 the remaining solid after subtraction.</li> </ul> <p>Use case: Holes, cutouts, slots, and pockets.</p>"},{"location":"core_boolean/#intersectiona-b","title":"intersection(a, b)","text":"<p>Keeps only the overlapping volume of a and b. This is equivalent to a logical AND.</p> <pre><code>-- Lens-like shape: overlap of two spheres\nlocal s1 = sphere(15)\nlocal s2 = sphere(15)\ns2 = translate(s2, 10, 0, 0)\nemit(intersection(s1, s2))\n</code></pre>"},{"location":"core_boolean/#parameters_2","title":"Parameters","text":"<ul> <li>a: Shape</li> <li>b: Shape</li> <li>Returns Shape \u2014 the common solid volume.</li> </ul> <p>Use case: Useful for trimming shapes to a boundary or creating fillets by overlap.</p>"},{"location":"core_boolean/#practical-example-mounting-bracket","title":"Practical Example: Mounting Bracket","text":"<pre><code>-- Base plate\nlocal plate = center_xy(extrude(rect(80, 40), 6))\n\n-- Cylindrical boss\nlocal boss = translate(cylinder(10, 20), 0, 0, 6)\n\n-- Combine\nlocal raw = union(plate, boss)\n\n-- Drill a hole in the boss\nlocal hole = center_xy(cylinder(4, 30))\nlocal bracket = difference(raw, hole)\n\nbracket = scale(bracket, 0.5)\nemit(bracket)\n</code></pre>"},{"location":"core_boolean/#tips-gotchas","title":"Tips &amp; Gotchas","text":"<ul> <li>Order matters in difference: difference(a, b) \u2260 difference(b, a).</li> <li>Union can take many shapes: union(a, b, c, d) is valid.</li> <li>Clean geometry: For best results, ensure inputs overlap or touch meaningfully. Thin intersections may lead to unstable results.</li> <li>Combine with transforms: Position parts with translate/rotate_* before applying Booleans.</li> </ul> <p>Boolean operations let you think like a sculptor: add with union, carve with difference, and trim with intersection. Together, they form the backbone of parametric CAD in CodeCAD.</p>"},{"location":"core_construction/","title":"Construction","text":"<p>Construction operations turn 2D sketches into 3D solids. They are the key bridge between flat outlines and real, machinable geometry. CodeCAD supports two fundamental construction methods: <code>extrusion</code> and <code>revolve</code>.</p>"},{"location":"core_construction/#extrudeface-height","title":"extrude(face, height)","text":"<p>Creates a 3D solid by linearly extruding a planar face/profile along the +Z axis.</p> <pre><code>-- Simple plate extruded from a rectangle\nlocal plate2D = rect(80, 40)\nlocal plate3D = extrude(plate2D, 6)\nemit(plate3D)\n</code></pre>"},{"location":"core_construction/#parameters","title":"Parameters","text":"<ul> <li>face: Shape \u2014 a planar 2D face (e.g. from rect, poly_xy)</li> <li>height: number \u2014 extrusion height in mm</li> <li>Returns Shape \u2014 solid with the given thickness</li> </ul>"},{"location":"core_construction/#notes","title":"Notes","text":"<ul> <li>Extrusion always extends upwards (+Z) from the sketch plane.</li> <li>For downward or symmetric extrusions, combine with translate or center_z.</li> </ul> <pre><code>-- Symmetric extrusion (thickness 10, centered on Z=0)\nlocal slot = center_xy(rect(40, 10))\nslot = center_z(extrude(slot, 10))\nemit(slot)\n</code></pre>"},{"location":"core_construction/#revolveprofile-angle_deg","title":"revolve(profile, angle_deg)","text":"<p>Creates a 3D solid by revolving a profile drawn in the XZ plane around the Z-axis at the origin.</p> <pre><code>-- Bottle-like shape by revolving an open profile\nlocal outline = profile_xz({\n{0, 0}, {30, 0}, {28, 10}, {20, 60}, {0, 60}\n})\n\nlocal body = revolve(outline, 360) -- full revolution\nemit(body)\n</code></pre>"},{"location":"core_construction/#parameters_1","title":"Parameters","text":"<ul> <li>profile: Shape \u2014 a profile curve or face in XZ-plane (use profile_xz)</li> <li>angle_deg: number \u2014 sweep angle in degrees (0\u2013360)</li> <li>Returns Shape \u2014 revolved solid</li> </ul>"},{"location":"core_construction/#notes_1","title":"Notes","text":"<ul> <li>For open profiles, the curve is revolved as a surface swept around Z.</li> <li>To get a closed solid, ensure the profile touches the Z-axis at both ends or use a closed face.</li> <li>angle_deg &lt; 360\u00b0 creates partial revolutions (e.g., 180\u00b0 = half shell).</li> </ul> <pre><code>-- Partial revolve: a 90\u00b0 section of a disk\nlocal arc_profile = profile_xz({{0,0},{30,0},{30,5},{0,5}}, true)\nemit(revolve(arc_profile, 90))\n</code></pre>"},{"location":"core_construction/#practical-patterns","title":"Practical Patterns","text":"<ul> <li>Plates, brackets, ribs \u2192 extrude a 2D sketch</li> <li>Turned parts (shafts, bottles, vases) \u2192 revolve a profile</li> <li>Symmetric solids \u2192 use <code>center_z</code> after extrusion, or revolve a symmetric profile</li> <li>Combine with Booleans \u2192 cut holes, add bosses, and shape parts</li> </ul>"},{"location":"core_construction/#tips-gotchas","title":"Tips &amp; Gotchas","text":"<ul> <li>Input must be planar: <code>extrude</code> and <code>revolve</code> require flat profiles (<code>rect</code>, <code>poly_xy</code>, <code>profile_xz</code>).</li> <li>Direction: Extrude is fixed along +Z.</li> <li>Closed vs open profiles:</li> <li><code>extrude</code> requires closed loops.</li> <li><code>revolve</code> accepts both open (lathe-like) and closed (disk-like) profiles.</li> <li>Partial revolves: Great for rings, sections, or curved supports.</li> </ul> <p>Extrusion and revolve are the workhorses of CAD: almost any mechanical part starts from these two construction methods. Use them to lift sketches into solids, then refine with Booleans, transformations, and features.</p>"},{"location":"core_curves/","title":"Curves","text":"<p>Curved modeling tools help you create lathe-like solids from profiles and smooth, doubly-curved plates. These are ideal for bottles, vases, ducts, fairings, and aesthetic panels.</p>"},{"location":"core_curves/#latheopts","title":"lathe(opts)","text":"<p>Revolves a profile around the Z-axis to create a solid or hollow body.</p> <p>Info</p> <p>The control points are given in XZ: x = radius, z = height. This matches the profile_xz convention used by revolve.</p>"},{"location":"core_curves/#options-latheoptions","title":"Options (LatheOptions)","text":"<ul> <li><code>points</code>: ({[1]:number,[2]:number})[] \u2014 control points in XZ order {x, z}</li> <li><code>angle?</code>: number \u2014 revolve angle in degrees (default 360)</li> <li><code>thickness?</code>: number \u2014 wall thickness in mm; if set, a hollow body is created by auto-offsetting and subtracting an inner silhouette</li> <li>Returns Shape \u2014 the revolved solid (watertight)</li> </ul>"},{"location":"core_curves/#examples","title":"Examples","text":"<ol> <li>Solid, full revolution</li> </ol> <pre><code>local vase = lathe{\npoints = {\n{0, 0}, -- start on axis for a sealed bottom\n{30, 0},\n{28, 10},\n{20, 60},\n{10, 90},\n{0, 100}, -- touch axis again for a sealed top\n},\nangle = 360,\n}\nemit(vase)\n</code></pre> <ol> <li>Hollow shell with 2 mm wall</li> </ol> <pre><code>local bottle = lathe{\npoints = {\n{0, 0}, {32, 0}, {34, 8}, {30, 40}, {18, 90}, {12, 120}\n},\nthickness = 2.0, -- creates an inner offset and subtracts it\n}\nemit(bottle)\n</code></pre> <ol> <li>Partial revolve (a 120\u00b0 segment)</li> </ol> <pre><code>local fairing_segment = lathe{\npoints = { {0,0}, {20,0}, {25,15}, {18,40}, {8,60} },\nangle = 120,\nthickness = 1.2,\n}\nemit(fairing_segment)\n</code></pre>"},{"location":"core_curves/#practical-notes","title":"Practical notes","text":"<ul> <li>To obtain a capped (closed) solid with angle=360, make the first and last points lie on the Z-axis (x=0).</li> <li>For partial angles, the ends are open like cut sections\u2014cap them via Booleans if needed.</li> <li>When using thickness, ensure the inner radius stays positive everywhere: x &gt; thickness.</li> </ul>"},{"location":"core_curves/#curved_plate_xysize_x-size_y-thickness-k_u-k_v","title":"curved_plate_xy(size_x, size_y, thickness, k_u, k_v)","text":"<p>Creates a doubly-curved plate by fitting a BSpline surface to a height field z(x,y), offsetting it by \u00b1thickness/2, and closing the sides with ruled faces. The result is a watertight solid suitable for Booleans and export.</p>"},{"location":"core_curves/#parameters","title":"Parameters","text":"<ul> <li>size_x: number \u2014 extent along X (mm)</li> <li>size_y: number \u2014 extent along Y (mm)</li> <li>thickness: number \u2014 plate thickness (mm)</li> <li>k_u: number \u2014 BSpline surface control parameter along U/X</li> <li>k_v: number \u2014 BSpline surface control parameter along V/Y</li> </ul> <p>!!! info About k_u, k_v</p> <pre><code>These parameters control the smoothness/complexity of the fitted surface along X and Y (e.g., BSpline order or control density depending on implementation). Use modest integers (e.g., 3\u20136) for smooth plates; increase if you need more flexibility.\n</code></pre>"},{"location":"core_curves/#examples_1","title":"Examples","text":"<ol> <li>Gentle saddle panel</li> </ol> <pre><code>-- 120\u00d780 panel, 3 mm thick, smooth surface\nlocal panel = curved_plate_xy(120, 80, 3, 4, 4)\nemit(panel)\n</code></pre> <ol> <li>Stiffer curvature (more flexible surface fit)</li> </ol> <pre><code>local styled_panel = curved_plate_xy(150, 100, 2.5, 6, 5)\nemit(styled_panel)\n</code></pre> <p>Use cases</p> <ul> <li>Aerodynamic covers, fairings, dashboards</li> <li>Decorative/ergonomic panels blending into enclosures</li> <li>Subtractive molds: difference the plate from a block to imprint curvature</li> </ul>"},{"location":"core_curves/#tips-gotchas","title":"Tips &amp; Gotchas","text":"<ul> <li>Units &amp; axes: Distances are in mm; lathe axis is Z.</li> <li>Sealed lathes: Start/end points on the Z-axis (x=0) for closed ends.</li> <li>Wall checks: With thickness, ensure thickness &lt; min(x) along the profile.</li> <li>Partial segments: lathe{ angle &lt; 360 } produces open arcs\u2014cap or union as needed.</li> <li>Surface tuning: Increase k_u, k_v for more complex curvature; reduce for simpler, lighter geometry.</li> <li>Post-processing: Combine with fillet_all/chamfer_all for print-safe edges or with Booleans for cutouts and mounts.</li> </ul> <p>Curved tools complement sketches and construction: use <code>lathe</code> for radially symmetric bodies and <code>curved_plate_xy</code> when you need smooth, free-form surfaces that remain solid and CAD-friendly.</p>"},{"location":"core_features/","title":"Features","text":"<p>Features let you add finishing touches to your parts by softening or beveling sharp edges. CodeCAD provides both global (all edges) and selective (filtered edges) variants for fillets and chamfers.</p>"},{"location":"core_features/#global-edge-modifiers","title":"Global Edge Modifiers","text":""},{"location":"core_features/#fillet_alls-r","title":"fillet_all(s, r)","text":"<p>Applies a rounded fillet of constant radius r to all eligible edges of a shape.</p> <pre><code>local cube = box(40, 40, 40)\nlocal smooth = fillet_all(cube, 1)\n\nsmooth = scale(center_xy(smooth), 0.2)\nemit(smooth)\n</code></pre> <p>Tip</p> <p>Use <code>fillet_all</code> for quick prototypes. For precise control, switch to selective edge queries (see below).</p>"},{"location":"core_features/#chamfer_alls-d","title":"chamfer_all(s, d)","text":"<p>Applies a straight chamfer of distance d to all eligible edges of a shape.</p> <pre><code>local cube = box(40, 40, 40)\nlocal beveled = chamfer_all(cube, 2)\nbeveled = scale(center_xy(beveled), 0.2)\n\nemit(beveled)\n</code></pre>"},{"location":"core_features/#selective-edge-control","title":"Selective Edge Control","text":"<p>For more refined designs, you can query edges based on location, geometry, or orientation, then apply fillet or chamfer only where needed.</p>"},{"location":"core_features/#edge-query-workflow","title":"Edge Query Workflow","text":"<ol> <li>Start with edges(shape) to create an EdgeQuery.</li> <li>Apply filters such as <code>on_box_side</code>, <code>geom</code>, <code>parallel</code>, <code>dihedral_between</code>, <code>length_between</code>.</li> <li>Collect results with <code>.collect()</code>.</li> <li>Pass the resulting EdgeSet into fillet or chamfer.</li> </ol>"},{"location":"core_features/#example-fillet-only-vertical-edges","title":"Example: Fillet only vertical edges","text":"<pre><code>local base = box(40, 30, 20)\n\n-- Select edges parallel to Z\nlocal vertical_edges = edges(base):parallel(\"z\"):collect()\n\n-- Apply fillet to those edges only\nlocal softened = fillet(base, vertical_edges, 2)\n\nsoftened = scale(center_xy(softened), 0.2)\n\nemit(softened)\n</code></pre>"},{"location":"core_features/#example-chamfer-only-top-edges","title":"Example: Chamfer only top edges","text":"<pre><code>local block = box(50, 40, 20)\n\n-- Select edges lying on the top face (zmax)\nlocal top_edges = edges(block):on_box_side(\"zmax\"):collect()\n\n-- Apply chamfer to those edges\nlocal beveled = chamfer(block, top_edges, 3)\nbeveled = scale(center_xy(beveled), 0.2)\n\nemit(beveled)\n</code></pre>"},{"location":"core_features/#edge-filters","title":"Edge Filters","text":"<ul> <li><code>on_box_side(side)</code>   Selects edges on one side of the shape\u2019s bounding box.   Valid values: <code>xmin</code>, <code>xmax</code>, <code>ymin</code>, <code>ymax</code>, <code>zmin</code>, <code>zmax</code>.</li> <li><code>geom(kind)</code>   Select edges by geometric type: <code>line</code> (straight) or <code>circle</code> (arcs).</li> <li><code>parallel(axis, tol_deg?)</code>   Select edges whose tangent is parallel to <code>x</code>, <code>y</code>, or <code>z</code> within tolerance (default 3\u00b0).</li> <li><code>dihedral_between(min_deg, max_deg)</code>   Select edges based on the angle between adjacent faces.</li> <li>Example: sharp edges (&lt; 100\u00b0), or shallow bends (&gt; 170\u00b0).</li> <li><code>length_between(min_mm, max_mm)</code>   Select edges by their length interval.</li> </ul>"},{"location":"core_features/#tips-gotchas","title":"Tips &amp; Gotchas","text":"<ul> <li>Global vs selective: <code>fillet_all</code>/<code>chamfer_all</code> are fast, but selective queries give you design intent.</li> <li>Edge eligibility: Some complex intersections may not support filleting/chamfering.</li> <li>Combine filters: Queries are chainable (e.g., :on_box_side(\"zmax\"):parallel(\"x\")).</li> <li>Dihedral filter: Great for distinguishing sharp corners from nearly flat edges.</li> <li>Iteration-friendly: Queries return a new builder each time\u2014safe for reuse.</li> </ul> <p>With global and selective tools, you can decide whether to quickly soften all edges or carefully refine just the functional ones. This balance gives CodeCAD the power of parametric design with real-world manufacturing detail.</p>"},{"location":"core_mechanical/","title":"Mechanical","text":"<p>Mechanical features help you model real-world hardware quickly\u2014smooth pipe transitions, printable rods, and robust screw threads. All measurements are in millimeters and the Z-axis is the default axial direction.</p>"},{"location":"core_mechanical/#threadspec","title":"ThreadSpec","text":"<p><code>ThreadSpec</code> captures all parameters needed to generate compatible external (rod) and internal (cutter) threads. It\u2019s based on a fit diameter centered at the pitch radius, so the same spec can drive both male and female parts with predictable clearance.</p>"},{"location":"core_mechanical/#create-normalize","title":"Create &amp; Normalize","text":"<pre><code>local ts = ThreadSpec.new()\nts.fitDiameter = 20.0 -- at pitch radius \u00d7 2\nts.pitch = 2.0 -- mm per revolution\nts.depth = 0.9 -- radial depth from pitch radius\nts.clearance = 0.20 -- extra clearance for FDM\nts.segmentsPerTurn = 48 -- smoothness\nts.handed = \"right\" -- \"right\" | \"left\"\nts.tip = \"cut\" -- \"sharp\" | \"cut\"\nts.tipCutRatio = 0.4 -- 0.0..1.0 (only used when tip=\"cut\")\n\nts:normalize() -- clamp/validate fields (recommended)\n</code></pre>"},{"location":"core_mechanical/#fields","title":"Fields","text":"<ul> <li><code>fitDiameter</code> (number) \u2014 pitch radius \u00d7 2 used for both mating parts</li> <li><code>pitch</code> (number) \u2014 axial advance per turn (mm/rev)</li> <li><code>depth</code> (number) \u2014 radial thread depth from pitch radius to crest/root midline</li> <li><code>clearance</code> (number) \u2014 extra radial slack; typical 0.10\u20130.30 for FDM printing</li> <li><code>segmentsPerTurn</code> (integer) \u2014 tessellation density (more = smoother)</li> <li><code>handed</code> (\"right\"|\"left\") \u2014 winding direction</li> <li><code>tip</code> (\"sharp\"|\"cut\") \u2014 crest style</li> <li><code>tipCutRatio</code> (number) \u2014 truncation fraction for \"cut\" tips, usually 0.3\u20130.5</li> </ul>"},{"location":"core_mechanical/#practical-guidance","title":"Practical guidance","text":"<ul> <li>Use the same <code>fitDiameter</code> and pitch for mating rod/nut pairs.</li> <li>Increase clearance for tighter printers/materials; reduce for precision fits.</li> <li><code>segmentsPerTurn</code> of 32\u201364 is a good balance for most parts.</li> </ul>"},{"location":"core_mechanical/#pipe-adapter","title":"Pipe Adapter","text":"<pre><code>pipe_adapter(rIn0, rOut0, rIn1, rOut1, length, steepness?)\n</code></pre> <p>Builds a smooth, revolved transition between two coaxial pipes. The adapter\u2019s axis is Z; radii are taken at z=0 and z=length.</p> <pre><code>-- Transition from a 20\u00d726 pipe (ID\u00d7OD) to a 12\u00d716 pipe over 40 mm\nlocal adapter = pipe_adapter(\n    10,\n    13, -- rIn0, rOut0 (ID=20 -&gt; rIn0=10; OD=26 -&gt; rOut0=13)\n    6,\n    8, -- rIn1, rOut1 (ID=12 -&gt; rIn1=6; OD=16 -&gt; rOut1=8)\n    40, -- length\n    8 -- steepness (optional, 4..12; higher = gentler blend)\n)\nemit(scale(adapter, 0.2))\n</code></pre>"},{"location":"core_mechanical/#parameters","title":"Parameters","text":"<ul> <li>rIn0, rOut0: inner/outer radius at z=0</li> <li>rIn1, rOut1: inner/outer radius at z=length</li> <li>length: axial distance along Z</li> <li>steepness?: smoothing factor [4..12] (defaults to a balanced value)</li> <li>Returns Shape \u2014 a watertight revolved solid</li> </ul>"},{"location":"core_mechanical/#notes-tips","title":"Notes &amp; Tips","text":"<ul> <li>Use for reducers/expanders between hose or pipe standards.</li> <li>Keep wall thickness reasonable: rOutX - rInX should reflect manufacturable walls.</li> <li>Increase steepness for a longer, gentler transition (better flow, less turbulence).</li> </ul>"},{"location":"core_mechanical/#rod","title":"Rod","text":"<pre><code>rod(diameter, length, chamferBottom?, chamferTop?)\n</code></pre> <p>Creates a cylindrical rod with optional end chamfers\u2014handy as a starting shaft or as a carrier for threads.</p> <pre><code>-- 8 mm \u00d7 30 mm rod with a small chamfer on both ends\nlocal r = rod(8, 15, true, true)\nemit(r)\n</code></pre>"},{"location":"core_mechanical/#parameters_1","title":"Parameters","text":"<ul> <li><code>diameter</code>: outer diameter (OD)</li> <li><code>length</code>: along the Z-axis</li> <li><code>chamferBottom?</code>, <code>chamferTop?</code>: booleans to ease starts and reduce elephant-foot</li> <li>Returns Shape \u2014 solid cylinder with optional chamfers</li> </ul>"},{"location":"core_mechanical/#threaded-rod","title":"Threaded Rod","text":"<pre><code>threaded_rod(totalLength, threadLength, threadSpec)\n</code></pre> <p>Generates an external threaded shaft and returns both the solid and the actual major diameter applied after any adjustments for tip style and clearance.</p> <pre><code>-- M20-ish printable rod: 60 mm long, 45 mm threaded section\nlocal ts = ThreadSpec.new()\nts.fitDiameter = 20.0\nts.pitch = 2.0\nts.depth = 0.9\nts.clearance = 0.20\nts.segmentsPerTurn = 48\nts.handed = \"right\"\nts.tip = \"cut\"\nts.tipCutRatio = 0.4\nts:normalize()\n\nlocal tr, major = threaded_rod(15, 10, ts)\nemit(tr)\n</code></pre>"},{"location":"core_mechanical/#parameters_2","title":"Parameters","text":"<ul> <li><code>totalLength</code>: full shaft length (mm)</li> <li><code>threadLength</code>: axial length of the threaded section (0..totalLength)</li> <li><code>threadSpec</code>: a validated <code>ThreadSpec</code></li> <li>Returns</li> <li>Shape \u2014 the threaded rod solid</li> <li>number \u2014 actualMajorDiameter (mm)</li> </ul>"},{"location":"core_mechanical/#patterns-tips","title":"Patterns &amp; Tips","text":"<ul> <li>For partial threading, set <code>threadLength</code> &lt; <code>totalLength</code> (e.g., leave a smooth shank).</li> <li>Use <code>handed=\"left\"</code> for reverse threads in anti-rotation features.</li> <li>For small pitches or brittle materials, prefer <code>tip=\"cut\"</code> with <code>tipCutRatio\u22480.4</code>.</li> <li>Increase <code>segmentsPerTurn</code> for close-up aesthetics or metal printing.</li> </ul>"},{"location":"core_mechanical/#gotchas","title":"Gotchas","text":"<ul> <li>Units &amp; axes: All distances in mm; axial features are aligned to Z.</li> <li>Validate specs: Always call <code>spec:normalize()</code> to clamp and sanity-check inputs.</li> <li>Wall checks: Ensure <code>rOut</code> \u2212 <code>rIn</code> stays positive and realistic for printing or machining.</li> <li>Mating threads: Reuse the same <code>fitDiameter/pitch</code> for male/female; tune clearance for your process.</li> <li>Geometry complexity: Extremely tight bends, tiny pitches, or abrupt transitions may challenge meshing\u2014raise <code>segmentsPerTurn</code> or adjust dimensions.</li> </ul> <p>These mechanical tools give you parametric, fabrication-ready parts\u2014smooth pipe transitions, robust rods, and threads that actually fit.</p>"},{"location":"core_primitives/","title":"Primitives","text":"<p>Primitives are the basic building blocks in CodeCAD. They represent simple 3D shapes that you can combine, transform, or modify to create more complex parts.</p> <p>All primitives are parametric: you specify their size in code, and can later adapt them easily by changing parameters.</p> <p>Model resolution</p> <p>All the models are generated below with deflection 0.2 to lower the file size.</p>"},{"location":"core_primitives/#boxwidth-depth-height","title":"box(width, depth, height)","text":"<p>Creates a rectangular box (a cuboid).</p> <pre><code>local p = box(20, 10, 5)\nemit(p)\n</code></pre> <ul> <li>width \u2192 size along the X axis</li> <li>depth \u2192 size along the Y axis</li> <li>height \u2192 size along the Z axis</li> </ul>"},{"location":"core_primitives/#cylinderdiameter-height","title":"cylinder(diameter, height)","text":"<p>Creates a vertical cylinder centered in x/y</p> <pre><code>local c = cylinder(5, 20)\nemit(c)\n</code></pre> <ul> <li>diameter \u2192 cylinder diameter</li> <li>height \u2192 cylinder height</li> </ul>"},{"location":"core_primitives/#spherediameter","title":"sphere(diameter)","text":"<p>Creates a sphere centered in origin.</p> <pre><code>local s = sphere(10)\nemit(s)\n</code></pre> <ul> <li>diameter \u2192 sphere diameter</li> </ul>"},{"location":"core_primitives/#coned1-d2-height","title":"cone(d1, d2, height)","text":"<p>Creates a conical or frustum-shaped solid.</p> <pre><code>local co = cone(10, 2, 10)\nemit(co)\n</code></pre> <ul> <li>d1 \u2192 bottom diameter</li> <li>d2 \u2192 top diameter (set to 0 for a true cone)</li> <li>height \u2192 cone height</li> </ul>"},{"location":"core_primitives/#wedgedx-dy-dz-ltx","title":"wedge(dx, dy, dz, ltx)","text":"<p>Creates a wedge \u2014 essentially a box with slanted top faces.</p> <pre><code>local w = wedge(20, 10, 10, 5)\nemit(w)\n</code></pre> <ul> <li>dx, dy, dz \u2192 base box dimensions</li> <li>ltx \u2192 shift of left corner</li> </ul>"},{"location":"core_primitives/#hex_prismdiameter-height","title":"hex_prism(diameter, height)","text":"<p>Creates a regular hexagonal prism (like a bolt head).</p> <pre><code>local h = hex_prism(5, 2)\nemit(h)\n</code></pre> <ul> <li>diameter \u2192 distance from flat to flat side (across)</li> <li>height \u2192 prism height</li> </ul>"},{"location":"core_primitives/#tips-for-working-with-primitives","title":"Tips for Working with Primitives","text":"<ul> <li>Start simple: Every complex part begins as a box, cylinder, or combination.</li> <li>Think parametrically: Store dimensions in variables, so you can easily adapt them later.</li> <li>Combine with Booleans: Use difference, union, and intersection to cut holes, join parts, or trim shapes.</li> </ul>"},{"location":"core_sketches/","title":"Sketches","text":"<p>Sketches are 2D profiles you can later <code>extrude</code> or <code>revolve</code> into 3D solids. CodeCAD\u2019s sketch helpers operate on fixed planes for simplicity:</p> <ul> <li><code>poly_xy</code> and <code>rect</code> create profiles on the XY plane (Z = 0).</li> <li><code>profile_xz</code> creates profiles on the XZ plane (Y = 0), which is convenient for revolved parts.</li> </ul> <p>Use sketches to describe outlines, ribs, grooves, and lathe-like shapes in a compact, parametric way.</p> <p>Tip</p> <p>A closed profile (a loop) can form a face and be extruded into a solid. An open profile is usually for revolve (e.g., a lathe path) or remains an edge curve.</p>"},{"location":"core_sketches/#poly_xypts","title":"poly_xy(pts)","text":"<p>Builds a planar polygonal face on the XY plane from a list of points. The polygon is closed by default.</p> <pre><code>--- pts: array of 2D points on XY.\n--- You can pass {x=..., y=...} or tuple-like {x, y}.\nlocal s = poly_xy({\n{0, 0},\n{40, 0},\n{30, 20},\n{10, 25},\n{0, 10},\n})\n</code></pre>"},{"location":"core_sketches/#parameters","title":"Parameters","text":"<ul> <li>pts: Points must define a non-self-intersecting loop in either clockwise or counter-clockwise order.</li> <li>Returns: Shape \u2014 a planar face on Z = 0.</li> </ul>"},{"location":"core_sketches/#why-use-it","title":"Why use it?","text":"<p>Great for arbitrary brackets, gussets, and plates that you\u2019ll later extrude.</p>"},{"location":"core_sketches/#example-extrude-a-2d-plate","title":"Example: Extrude a 2D plate","text":"<pre><code>local plate = extrude(\n    poly_xy({\n        { -30, 0 },\n        { 30,  0 },\n        { 0,   30 },\n    }),\n    5\n)\nplate = scale(plate, 0.5)\nemit(plate)\n</code></pre>"},{"location":"core_sketches/#profile_xzpts-closed","title":"profile_xz(pts, closed?)","text":"<p>Builds a polyline on the XZ plane (Y = 0). By default it is open. Set closed=true to close it into a loop (forming a face on XZ).</p> <pre><code>--- pts: array of {x,z} or tuple-like {x, z}\n--- closed: optional boolean, default false\nlocal p = profile_xz({\n{0, 0},\n{10, 0},\n{10, 20},\n{5, 25},\n})\n</code></pre>"},{"location":"core_sketches/#parameters_1","title":"Parameters","text":"<ul> <li>pts: ({[1]:number,[2]:number}|{x:number,z:number})[]</li> <li>closed?: boolean (default false)</li> <li>Returns   Shape \u2014 an edge (open) or a planar face (if closed=true) on Y = 0.</li> </ul> <p>Common use: revolve about Z-axis Supply an open profile that describes the radius vs. height, then revolve it around the Z-axis.</p>"},{"location":"core_sketches/#example","title":"Example","text":"<pre><code>-- Bottle-like shape by revolving an open XZ profile around Z.\n-- X is radius, Z is height. Start at the axis (x=0) for a sealed top/bottom.\nlocal outline = profile_xz({\n    { 0,  0 }, -- on axis\n    { 25, 0 }, -- outer radius at base\n    { 28, 5 },\n    { 30, 15 },\n    { 20, 3 },\n    { 18, 50 },\n    { 10, 60 },\n    { 0,  70 },\n}, true)\n\nlocal body = revolve(outline, 360)\nbody = scale(body, 0.2)\nemit(body)\n</code></pre> <p>Note</p> <p>If you need a capped revolved solid but your curve does not touch the axis, add points that go to x=0 at the ends (i.e., meet the Z-axis) or pass closed=true to make a face first and revolve that.</p>"},{"location":"core_sketches/#rectw-h","title":"rect(w, h)","text":"<p>Draws an axis-aligned rectangle on the XY plane with its lower-left corner at (0,0).</p> <pre><code>local r = rect(40, 20) -- width=40, height=20\n</code></pre>"},{"location":"core_sketches/#parameters_2","title":"Parameters","text":"<ul> <li>w: number \u2014 width along +X</li> <li>h: number \u2014 height along +Y</li> <li>Returns   Shape \u2014 a rectangular face on Z = 0.</li> </ul>"},{"location":"core_sketches/#point-formats","title":"Point Formats","text":"<p>You can mix either style within one call:</p> <ul> <li>Tuple-like: {x, y} or {x, z}</li> <li>Named fields: {x=..., y=...} or {x=..., z=...}</li> </ul> <pre><code>local s = poly_xy({\n{0,0}, {50,0}, {x=50,y=30}, {x=0,y=30}\n})\n</code></pre>"},{"location":"core_sketches/#practical-patterns","title":"Practical Patterns","text":"<ul> <li>Holes in plates: Create outer face with <code>poly_xy</code>, <code>extrude</code>, then difference a cylinder or another <code>poly_xy/extrude</code> for cutouts.</li> <li>Lathe parts: Draft an open <code>profile_xz</code> where x is radius and <code>revolve</code>.</li> <li>Parametric design: Store dimensions in variables and compute points; small math changes reshape the whole model.</li> </ul>"},{"location":"core_sketches/#gotchas-tips","title":"Gotchas &amp; Tips","text":"<ul> <li>Winding / self-intersections: Ensure polygon points don\u2019t cross; ambiguous loops cannot form faces.</li> <li>Planarity: Sketch helpers lock you to XY or XZ; for other orientations, sketch first then rotate_* or translate.</li> <li>Closing profiles for revolve: An open profile_xz that touches the Z-axis at its ends produces a sealed revolve. Otherwise, add axis-touching points or use closed=true before revolve.</li> </ul> <p>With these three tools - <code>poly_xy</code>, <code>profile_xz</code>, and <code>rect</code> - you can author most 2D outlines needed for mechanical parts, then lift them into 3D using <code>extrude</code> or <code>revolve</code>.</p>"},{"location":"core_transform/","title":"Transformations","text":"<p>Transformations let you move, rotate, and resize shapes in 3D space. They are essential for positioning parts, assembling sub-shapes, and creating symmetric patterns. In CodeCAD, transformations always act in world coordinates (global X/Y/Z).</p> <p>Info</p> <p>Every transformation creates a new shape. To update the original, assign the result back to the same variable.</p>"},{"location":"core_transform/#translates-dx-dy-dz","title":"translate(s, dx, dy, dz)","text":"<p>Moves a shape by the given offsets.</p> <pre><code>-- Two cylinders side by side\nlocal c1 = cylinder(5, 20)\nlocal c2 = translate(c1, 15, 0, 0)\nemit(union(c1, c2))\n</code></pre>"},{"location":"core_transform/#parameters","title":"Parameters","text":"<ul> <li>s: Shape</li> <li>dx: number \u2014 offset along X</li> <li>dy: number \u2014 offset along Y</li> <li>dz: number \u2014 offset along Z</li> <li>Returns Shape \u2014 the translated shape.</li> </ul>"},{"location":"core_transform/#rotate_xs-deg","title":"rotate_x(s, deg)","text":"<p>Rotates a shape around the X-axis, following the right-hand rule.</p> <pre><code>local rod = cylinder(3, 40)\nemit(rotate_x(rod, 90)) -- lay rod flat along Y\n</code></pre>"},{"location":"core_transform/#parameters_1","title":"Parameters","text":"<ul> <li>s: Shape</li> <li>deg: number \u2014 rotation angle in degrees</li> </ul>"},{"location":"core_transform/#rotate_ys-deg","title":"rotate_y(s, deg)","text":"<p>Rotates a shape around the Y-axis.</p> <pre><code>local boxy = box(20, 10, 5)\nemit(rotate_y(boxy, 45))\n</code></pre>"},{"location":"core_transform/#rotate_zs-deg","title":"rotate_z(s, deg)","text":"<p>Rotates a shape around the Z-axis.</p> <pre><code>local arm = extrude(rect(60, 10), 5)\nemit(rotate_z(arm, 30))\n</code></pre>"},{"location":"core_transform/#scales-factor","title":"scale(s, factor)","text":"<p>Uniformly scales a shape around the world origin (0,0,0).</p> <pre><code>local s = sphere(10)\nemit(scale(s, 1.5)) -- 50% larger\n</code></pre>"},{"location":"core_transform/#parameters_2","title":"Parameters","text":"<ul> <li>s: Shape</li> <li>factor: number \u2014 scale multiplier   (1.0 = no change, 2.0 = double size, 0.5 = half size)</li> </ul> <p>Note</p> <p>Scaling happens around the origin. To scale around a shape\u2019s centroid, use <code>center_xy</code>, <code>center_xyz</code>, etc., before scaling, then translate back if needed.</p>"},{"location":"core_transform/#transformation-helpers","title":"Transformation Helpers","text":"<p>Centering transforms make it easy to align parts around the world origin or move a part\u2019s centroid to a specific location. They work by translating the shape based on its bounding box and center of mass.</p>"},{"location":"core_transform/#why-this-matters","title":"Why this matters","text":"<ul> <li>Rotations and uniform scale behave predictably when the part is centered.</li> <li>Symmetric assemblies are simpler when sub-parts sit around (0,0,0).</li> </ul>"},{"location":"core_transform/#center_xs","title":"center_x(s)","text":"<p>Centers a shape along X around 0 (shifts by half its width).</p> <pre><code>local beam = box(80, 20, 10)\nemit(center_x(beam))  -- now spans from -40 to +40 along X\n</code></pre>"},{"location":"core_transform/#center_ys","title":"center_y(s)","text":"<p>Centers a shape along Y around 0 (shifts by half its depth).</p> <pre><code>local rail = box(10, 60, 10)\nemit(center_y(rail))  -- centered along Y\n</code></pre>"},{"location":"core_transform/#center_zs","title":"center_z(s)","text":"<p>Centers a shape along Z around 0 (shifts by half its height).</p> <pre><code>local plate = extrude(rect(80, 40), 6)\nemit(center_z(plate))  -- thickness goes from -3 to +3\n</code></pre>"},{"location":"core_transform/#center_xys","title":"center_xy(s)","text":"<p>Centers a shape in the XY-plane (X and Y only).</p> <pre><code>local bracket = extrude(rect(120, 80), 8)\nemit(center_xy(bracket)) -- XY centered, Z unchanged\n</code></pre>"},{"location":"core_transform/#center_xyzs","title":"center_xyz(s)","text":"<p>Centers a shape in all axes (X, Y, and Z).</p> <pre><code>local housing = box(60, 40, 30)\nemit(center_xyz(housing)) -- centered at the world origin\n</code></pre>"},{"location":"core_transform/#center_tos-cx-cy-cz","title":"center_to(s, cx, cy, cz)","text":"<p>Moves a shape so that its center lands exactly at (cx, cy, cz).</p> <pre><code>-- Place a pulley with its centroid at (100, 0, 25)\nlocal pulley = union(\ncylinder(20, 10),\ncenter_z(cylinder(25, 4)))\nemit(center_to(pulley, 100, 0, 25))\n</code></pre>"},{"location":"core_transform/#parameters_3","title":"Parameters","text":"<ul> <li>s: Shape</li> <li>cx, cy, cz: number \u2014 target center coordinates</li> <li>Returns Shape \u2014 translated so its center is at (cx, cy, cz).</li> </ul>"},{"location":"core_transform/#practical-example-assembling-parts","title":"Practical Example: Assembling Parts","text":"<pre><code>-- Base plate\nlocal plate = translate(center_xy(extrude(rect(80, 40), 5)), 0, 0, 30)\n\n-- Four legs (cylinders), rotated and translated into corners\nlocal leg = cylinder(3, 30)\nlocal leg_positions = {\n    { -35, -15 },\n    { 35,  -15 },\n    { 35,  15 },\n    { -35, 15 },\n}\n\nlocal legs = {}\nfor _, pos in ipairs(leg_positions) do\n    table.insert(legs, translate(leg, pos[1], pos[2], 0))\nend\n\nlocal tab = union(plate, table.unpack(legs))\ntab = scale(tab, 0.2)\nemit(tab)\n</code></pre>"},{"location":"core_transform/#tips-gotchas","title":"Tips &amp; Gotchas","text":"<ul> <li>Centering is non-destructive: each call returns a new, translated shape.</li> <li>Center before transform: use <code>center_xy</code> or <code>center_xyz</code> before <code>rotate_*</code> or <code>scale</code> for predictable results.</li> <li>Precise placement: combine <code>center_xy</code> / <code>center_xyz</code> with <code>translate</code>, or use <code>center_to</code> directly.</li> <li>Assemblies: center each sub-part first, then position them\u2014this keeps your math simple and robust.</li> <li>Order matters: <code>rotate_z(translate(s, \u2026))</code> \u2260 <code>translate(rotate_z(s, \u2026))</code>.</li> <li>Right-hand rule: positive rotation angles follow the right-hand grip convention.</li> <li>Scaling: only uniform scaling is supported at the moment.</li> </ul> <p>Transformations are your main tools for arranging shapes into assemblies. Combine them with Booleans to turn simple primitives into complex mechanical parts.</p>"},{"location":"design_principles/","title":"Design Principles","text":"<p>Designing with CodeCAD is not just about typing Lua code \u2014 it\u2019s about thinking like an engineer, maker, or designer. The workflow combines observation, planning, and coding into a smooth process that turns ideas into real-world parts.</p>"},{"location":"design_principles/#from-idea-to-code","title":"From Idea to Code","text":"<p>A typical CodeCAD design follows five steps:</p> <ol> <li>Observe    Look at the problem you want to solve. What is missing, broken, or worth improving?</li> <li>Think    Imagine possible solutions. Which geometry fits the purpose? Box, cylinder, or a combination? Should it be strong, lightweight, adjustable?</li> <li>Sketch    Make quick hand drawings or notes. Sketching helps clarify proportions and constraints before coding.</li> <li>Identify Measurements    Collect the critical dimensions: length, width, hole diameter, clearances, tolerances. This ensures your design will fit in the physical world.</li> <li>Code    Translate the idea into Lua using CodeCAD primitives, transforms, and operations. Since the model is parametric, changing one measurement later will update the whole part.</li> </ol> Design workflow with CodeCAD. <p>Most of the effort happens in thinking. Like in software engineering, good design starts with clear thinking about components, architecture, and the final goal. Coding is usually the smallest fraction of the work. If the design is clear, the Lua script is straightforward to write.</p>"},{"location":"design_principles/#why-this-matters","title":"Why This Matters","text":"<p>Many CAD tools encourage \"click-and-drag modeling\". CodeCAD, however, focuses on parametric, code-first design. This approach makes your designs:</p> <ul> <li>Reproducible \u2013 The same code always generates the same part.</li> <li>Adaptable \u2013 Change one parameter and regenerate for a new size or variant.</li> <li>Documented \u2013 The Lua script is both your model and its specification.</li> </ul>"},{"location":"design_principles/#example-workflow","title":"Example Workflow","text":"<p>Imagine you want to design a mounting bracket with a hole for a screw:</p> <p>Sketch on paper:</p> Simple sketch with pen and paper. <p>The parameters for this bracket are as follows:</p> <ul> <li>Width: 40 mm</li> <li>Height: 20 mm</li> <li>Thickness: 5 mm</li> <li>Screw hole: \u00d8 5 mm in the center</li> </ul> <p>Code in Lua:</p> <pre><code>local width = 40\nlocal height = 20\nlocal thickness = 5\nlocal hole_diameter = 5\n\n-- Base plate\nlocal plate = box(width, height, thickness)\n\n-- Hole\nlocal hole = cylinder(hole_diameter, thickness)\n\nhole = translate(hole, width / 2, height / 2, 0)\n\n-- Cut hole through plate\nlocal bracket = difference(plate, hole)\n\n-- Center object around origin\nbracket = translate(bracket, -width / 2, -height / 2, 0)\n\nemit(bracket)\n</code></pre> <p>This simple script is fully parametric: change hole_diameter = 8 and regenerate to adapt the bracket instantly.</p>"},{"location":"design_principles/#common-pitfalls","title":"Common Pitfalls","text":"<p>Beginner Pitfalls</p> <ul> <li>Jumping into code too early: Without a clear idea or sketch, the model becomes messy and hard to adjust.</li> <li>Ignoring measurements: Guessing dimensions often leads to parts that don\u2019t fit in real life.</li> <li>Overcomplicating the first version: Start simple, then refine. Complex assemblies are easier when built step by step.</li> <li>Forgetting tolerances: A part that looks perfect in CAD may not fit after printing or machining if no clearance is added.</li> </ul>"},{"location":"design_principles/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Spend most of your time thinking and sketching \u2014 coding is just the translation step.</li> <li>Start with real-world needs, not abstract shapes.</li> <li>Use sketching and measurement to clarify the problem.</li> <li>Code your model as parametric Lua, so it stays adaptable.</li> <li>Let CodeCAD be the catalyst that turns ideas into physical parts.</li> <li>It may be easier to think and model in XY plane first and then go to the Z direction.</li> </ul>"},{"location":"getting_started/","title":"Getting Started with CodeCAD","text":"<p>CodeCAD is designed to be simple and developer-friendly. Here is a first and simple example modeling a knob with a hex insert, ready to be printed:</p> <pre><code>local hex_across_flats = 13 -- mm\nlocal hex_height = 6        -- mm\n\nlocal knob_diameter = 20    -- mm\nlocal knob_height = 10      -- mm\n\nlocal hex = hex_prism(hex_across_flats, hex_height)\nhex = translate(hex, 0, 0, knob_height - hex_height)\n\nlocal cyl = cylinder(knob_diameter, knob_height)\n\nemit(difference(cyl, hex))\n</code></pre>"},{"location":"getting_started/#the-cli","title":"The CLI","text":"<p>The easiest way to begin is through the CLI tool <code>ccad</code>. You can always check available commands with:</p> <pre><code>ccad --help\n</code></pre> <p>But instead of starting from scratch, CodeCAD provides scaffolding to spin up a ready-to-use project.</p>"},{"location":"getting_started/#your-first-project","title":"Your First Project","text":"<p>Run the following commands in your terminal:</p> <pre><code>mkdir first_project &amp;&amp; cd first_project\nccad init\nccad parts add\nccad live\n</code></pre> <p>Here\u2019s what happens step by step:</p> <ul> <li><code>ccad init</code>   Creates a new project configuration (<code>project.json</code>) and initializes the folder. This command also sets up the Language Server Protocol (LSP) support so that your editor (e.g. Neovim, VSCode) has code completion, inline docs, and validation.</li> <li><code>ccad parts add</code>   Adds your first part file in <code>parts/</code>. By default, this contains a boilerplate Lua script with a simple cube.</li> <li><code>ccad live</code>   Starts the interactive PURE viewer. Keep it running \u2014 it automatically reloads whenever you edit your Lua files.</li> </ul> Your first project in the viewer. <p>Your project structure now looks like this:</p> <pre><code>\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 generated/ # STL/STEP exports go here\n\u251c\u2500\u2500 parts/ # Lua parts you define\n\u2502 \u2514\u2500\u2500 part.lua\n\u2514\u2500\u2500 project.json # Project configuration\n</code></pre> <p>Open the part file in your editor:</p> <pre><code>nvim parts/part.lua\n</code></pre>"},{"location":"getting_started/#understanding-the-lua-script","title":"Understanding the Lua Script","text":"<p>Here\u2019s the default cube example:</p> <pre><code>local cube = box(20, 30, 40)\nemit(cube)\n</code></pre> <p>Line by line:</p> <ul> <li><code>box(20, 20, 20)</code>   Creates a solid cube with width = 20mm, depth = 30mm, height = 40mm.</li> <li><code>emit(cube)</code>   Emits the shape to the viewer and export pipeline. Think of emit as \"make this visible and part of my design\".</li> </ul>"},{"location":"getting_started/#adding-more-shapes","title":"Adding More Shapes","text":"<p>Let\u2019s extend the part by combining shapes:</p> <pre><code>local base = box(40, 40, 10) -- A flat base plate\nlocal pillar = cylinder(5, 50) -- A vertical pillar\n\n-- Move pillar on top of the base and center on the cube\npillar = translate(pillar, 20, 20, 10)\n\nlocal model = union(base, pillar) -- Boolean union of both\nemit(model)\n</code></pre> <p>Now your viewer updates instantly to show a base plate with a centered pillar.</p> Pillar centered on a cube."},{"location":"getting_started/#using-functions","title":"Using Functions","text":"<p>You can also structure your Lua code with functions to make reusable parts:</p> <pre><code>-- Create a simple bracket\nlocal function bracket(width, height, thickness)\n    local plate = box(width, height, thickness)\n    local hole = cylinder(5, thickness * 2)\n    hole = translate(hole, width / 2, height / 2, 0)\n    return difference(plate, hole)\nend\n\nlocal part = bracket(30, 50, 5)\nemit(part)\n</code></pre> <p>This creates a parametric bracket with a hole. Try editing the parameters (30, 50, 5) and watch the viewer update live.</p>"},{"location":"getting_started/#exporting-stlstep","title":"Exporting STL/STEP","text":"<p>To generate STL and STEP files for your project, run:</p> <pre><code>ccad build\n</code></pre> <p>This command creates a separate <code>.stl</code> and <code>.step</code> file for each part and places them in the <code>generated/</code> folder.</p>"},{"location":"getting_started/#next-steps","title":"Next Steps","text":"<p>Now that you've built your first parts, you can:</p> <ul> <li>Explore more primitives: sphere, cone, rod, hex_prism, ... (see Primitives)</li> <li>Try boolean operations: union, difference, intersection</li> </ul> <p>You are ready to start modeling with CodeCAD \ud83c\udf89</p>"},{"location":"in_practice/","title":"CodeCAD in Practice","text":"<p>CodeCAD is more than just individual Lua scripts. A full project ties together parts, parameters, materials, and metadata into a reusable, adaptable design. Projects are stored in a human-readable JSON file (<code>project.json</code>) so that they can be shared, versioned, and modified easily.</p> <p>This section explains how projects work and how they connect to real-world workflows such as 3D printing and construction.</p>"},{"location":"in_practice/#coordinate-system","title":"Coordinate System","text":"<p>CodeCAD uses a right-handed 3D coordinate system, which defines how shapes are placed in space. Understanding the axes is crucial, because every primitive, transformation, and operation builds on this foundation.</p> <ul> <li>X axis \u2192 left / right</li> <li>Y axis \u2192 front / back</li> <li>Z axis \u2192 bottom / top</li> </ul> CodeCAD coordinate system. <p>By convention:</p> <ul> <li>The origin (0, 0, 0) is the reference point for all coordinates.</li> <li>Positive X goes to the right, negative X to the left.</li> <li>Positive Y goes backward, negative Y goes forward.</li> <li>Positive Z goes up, negative Z goes down.</li> </ul>"},{"location":"in_practice/#why-this-matters","title":"Why This Matters","text":"<ul> <li>Placing parts \u2013 When you use translate, you are moving objects along these axes.</li> <li>Rotations \u2013 Functions like <code>rotate_x</code> or <code>rotate_z</code> depend on knowing which direction each axis points.</li> <li>Assemblies \u2013 When combining multiple parts, a shared understanding of the coordinate system makes it easy to align them correctly.</li> <li>Manufacturing consistency \u2013 3D printers and CNC machines also rely on a coordinate system; designing with the correct orientation avoids surprises when exporting.</li> </ul>"},{"location":"in_practice/#example","title":"Example","text":"<pre><code>local b = box(10, 10, 10)\n\n-- Move 20 mm to the right (X axis)\nlocal right = translate(b, 20, 0, 0)\n\n-- Move 20 mm backward (Y axis)\nlocal back = translate(b, 0, 20, 0)\n\n-- Move 20 mm upward (Z axis)\nlocal up = translate(b, 0, 0, 20)\n\nemit(union(b, right, back, up))\n</code></pre> <p>This creates four cubes:</p> <ul> <li>one at the origin,</li> <li>one shifted right,</li> <li>one shifted back,</li> <li>and one shifted up.</li> </ul> A small L-shaped cluster of cubes showing how X, Y, and Z work."},{"location":"in_practice/#units","title":"Units","text":"<p>CodeCAD uses millimeters for all lengths and degrees for all angles by default.</p> <ul> <li>Lengths \u2192 millimeters (mm)</li> <li>Angles \u2192 degrees (\u00b0)</li> </ul> <p>This keeps the modeling workflow simple and consistent with most 3D printing and mechanical design standards.</p> <p>If you need to work in other units, you can either scale your model or adapt the units field in the project metadata.</p>"},{"location":"in_practice/#project-structure","title":"Project Structure","text":"<p>A CodeCAD project is described in a file called <code>project.json</code>. It contains the following main sections:</p>"},{"location":"in_practice/#meta","title":"meta","text":"<p>Basic information about the project.</p> <pre><code>\"meta\": {\n  \"author\": \"Bernhard\",\n  \"name\": \"Bracket\",\n  \"units\": \"mm\"\n}\n</code></pre> <ul> <li>name \u2013 Project name (any string).</li> <li>author \u2013 Creator\u2019s name.</li> <li>units \u2013 The working units (usually \"mm\").</li> </ul>"},{"location":"in_practice/#materials","title":"materials","text":"<p>Defines available materials, usually by color for visualization.</p> <pre><code>\"materials\": {\n  \"blue\": { \"color\": \"#5555ff\" },\n  \"green\": { \"color\": \"#55ff55\" },\n  \"oak\": {\"color\": \"#b58d63\" }\n}\n</code></pre> <ul> <li>Each entry has a key (blue, green, oak) and a hex color.</li> <li>Useful for distinguishing parts visually in the viewer, or documenting intended material choice (plastic, wood, metal).</li> </ul>"},{"location":"in_practice/#params","title":"params","text":"<p>The <code>params</code> section defines global parameters for your design. They behave like variables that can be accessed inside your Lua part scripts.</p> <p>The viewer automatically detects these parameters and provides a UI to change them interactively \u2014 allowing you to explore design variations without editing code directly.</p> <pre><code>\"params\": {\n   \"Width\": 30.0,\n   \"Distance\": 70.0,\n   \"Height\": 120.0\n}\n</code></pre> <ul> <li>Parameters are <code>numeric</code>, <code>boolean</code>, or <code>string</code> values.</li> <li>They act as variables that parts can use inside their Lua scripts.</li> <li>Change a parameter once \u2192 all dependent parts update automatically.</li> </ul>"},{"location":"in_practice/#parts","title":"parts","text":"<p>The heart of the project: a list of modeled components. The project should at least contain one part in order to render content.</p> <pre><code>{\n  \"id\": \"plate\",\n  \"name\": \"Upper Plate\",\n  \"source\": \"parts/plate.lua\",\n  \"material\": \"oak\",\n  \"visible\": true,\n  \"transform\": {\n    \"translate\": [45.0, 0.0, 0.0],\n    \"rotate\": [0.0, 0.0, 0.0],\n    \"scale\": 1.0\n  }\n}\n</code></pre> <ul> <li>id \u2013 Unique identifier for the part.</li> <li>name \u2013 Human-readable name.</li> <li>source \u2013 Relative path to the Lua script that generates this part.</li> <li>material \u2013 Which material (defined in materials) to use.</li> <li>visible \u2013 Whether the part is shown in the viewer.</li> <li>transform \u2013 Local transformations of the part</li> <li>translate: Move part in X/Y/Z.</li> <li>rotate: Rotate in degrees.</li> <li>scale: Uniform scaling factor.</li> </ul>"},{"location":"in_practice/#version","title":"version","text":"<p>Specifies the project file format version (currently 1).</p>"},{"location":"in_practice/#from-idea-to-physical-part","title":"From Idea to Physical Part","text":"<p>A project can contain multiple parts, each with different material and role.</p> <p>For example:</p> <ul> <li>Blue part = a steel mounting plate.</li> <li>Green part = a wooden frame element.</li> <li>Red part = a 3D-printed bolt.</li> </ul> <p>In the viewer, you can see how these parts interact, move them into place, and check clearances - all while keeping them parameterized for later adjustments.</p>"},{"location":"in_practice/#workflow-in-practice","title":"Workflow in Practice","text":"<ol> <li>Create your project directory and initialize the structure.</li> <li>Add and design your parts as Lua scripts (<code>parts/plate.lua</code>, <code>parts/bolt.lua</code>, ...).</li> <li>View live in the viewer to check fit and proportions.</li> <li>Export to 3D printing with <code>ccad build</code></li> <li>(Optional) Export to construction/manufacturing: add <code>save_step(part, \"part.step\")</code> at the end of your Lua file.</li> </ol>"},{"location":"in_practice/#keeping-designs-adaptable","title":"Keeping Designs Adaptable","text":"<p>The power of CodeCAD lies in its parametric design:</p> <ul> <li>Store and define important dimensions as params (<code>local width = param(\"Width\", 20)</code>).</li> <li>Reference these parameters in your Lua parts.</li> <li>When requirements change (a thicker plate, a longer distance), just edit the number in your Lua file or directly in your <code>project.json</code>.</li> <li>All parts update automatically \u2014 no manual rework needed.</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>CodeCAD is developed and tested primarily on macOS and Linux.</p> <p>Info</p> <p>Windows support is not yet available \u2014 if you want to help porting CodeCAD to Windows, contributions are welcome!</p>"},{"location":"installation/#requirements","title":"Requirements","text":"<p>Before building CodeCAD, make sure you have the following installed:</p> <ul> <li>A modern C++ compiler with C++17 support (e.g. <code>clang++</code> \u2265 12, <code>g++</code> \u2265 9)</li> <li>CMake \u2265 3.28</li> <li>OpenCASCADE 7.9.1 (provides the geometric modeling kernel)</li> <li>Standard development libraries</li> </ul>"},{"location":"installation/#installing-opencascade","title":"Installing OpenCASCADE","text":"<p>OpenCASCADE forms the core of CodeCAD\u2019s kernel. You need to install it together with some development dependencies.</p>"},{"location":"installation/#linux-ubuntudebian","title":"Linux (Ubuntu/Debian)","text":"<p>Install via APT:</p> <pre><code>sudo apt-get update\nsudo apt-get install -y \\\n    build-essential cmake git \\\n    liblua5.4-dev \\\n    xorg-dev libgl1-mesa-dev libglu1-mesa-dev \\\n    libtbb-dev libtbb12 \\\n    libocct-data-exchange-dev \\\n    libocct-foundation-dev \\\n    libocct-modeling-algorithms-dev \\\n    libocct-modeling-data-dev\n</code></pre> <p>Tip: On other Linux distributions (Fedora, Arch, ...) the package names may differ. Refer to your distribution\u2019s package manager and look for opencascade or occt packages.</p>"},{"location":"installation/#macos-homebrew","title":"macOS (Homebrew)","text":"<p>Install via Homebrew:</p> <pre><code>brew update\nbrew install cmake opencascade\n</code></pre> <p>Note: CodeCAD is regularly tested on macOS with OCCT 7.9.1 via Homebrew. If you have an older OCCT version, compilation may fail.</p>"},{"location":"installation/#build","title":"Build","text":"<p>Clone the repository and build:</p> <pre><code>git clone https://github.com/breiting/codecad\ncd codecad\nmkdir build &amp;&amp; cd build\ncmake ..\nmake -j$(nproc)   # On macOS: use `make -j$(sysctl -n hw.ncpu)`\nsudo make install\n</code></pre> <p>First CMake run</p> <p>The first run of <code>cmake</code> may take longer because external dependencies are downloaded and configured. Subsequent runs will be faster.</p>"},{"location":"installation/#post-installation","title":"Post-installation","text":"<p>After <code>make install</code>, ensure the target <code>bin</code> directory is available in your <code>$PATH</code>. You can check with:</p> <pre><code>ccad --help\n</code></pre> <p>If the installation was successful, you should see the CodeCAD CLI help. \ud83c\udf89 You are now ready getting started.</p>"},{"location":"introduction/","title":"Introduction to CodeCAD","text":""},{"location":"introduction/#what-is-codecad","title":"What is CodeCAD?","text":"<p>CodeCAD is a lightweight, Lua-based framework for building parametric 3D CAD models. It is designed for simplicity, speed, and reproducibility.</p> <p>Its goals are:</p> <ul> <li>\u270d\ufe0f Model in plain code \u2013 Scripts are as close as possible to how you\u2019d describe the object to another human.</li> <li>\ud83d\udd27 Parametric by design \u2013 Change dimensions, diameters, or wall thicknesses with a single variable.</li> <li>\ud83d\udce4 Robust output \u2013 Export to high-quality formats like STEP and STL for downstream CAD/CAM and 3D printing.</li> <li>\ud83d\udcc4 Text-based and open \u2013 Models are plain Lua files, editable in any text editor, storable in Git.</li> <li>\u2699\ufe0f Powered by OCCT \u2013 The engine is based on OpenCascade, a robust industry-grade kernel.</li> </ul> <p>With CodeCAD you can create fully parametric models with a very small amount of code. For example, this script builds a rod with threads:</p> <pre><code>local spec = ThreadSpec.new()\nspec.fitDiameter = 8.0\nspec.pitch = 1.25\nspec.depth = 0.6\n\nlocal part = threaded_rod(15.0, 10.0, spec)\nemit(part)\n</code></pre> <p>That may look simple, but it\u2019s already producing a real M8 threaded rod that can be 3D printed.</p>"},{"location":"introduction/#codecad-is-a-library-guis-are-optional","title":"CodeCAD is a library \u2014 GUIs are optional","text":"<p>CodeCAD is intentionally designed as a GUI-less library. You work in Lua files and let the system render your geometry in the included viewer.</p> <p>This makes CodeCAD extremely flexible:</p> <ul> <li>\ud83d\udd2c usable for research and automation pipelines</li> <li>\u2699\ufe0f embed into engineering workflows</li> <li>\ud83d\udcbb drive from scripts or even web services</li> </ul> <p>A minimal viewer is provided for live preview while coding, but the engine itself stays headless and embeddable.</p>"},{"location":"introduction/#why-codecad-instead-of-openscad-or-cadquery","title":"Why CodeCAD instead of OpenSCAD or CadQuery?","text":"<p>Like OpenSCAD and CadQuery, CodeCAD is open-source, script-based, and parametric. But CodeCAD focuses on a different sweet spot: lightweight, clean, and practical for everyday design.</p> <ul> <li>Lua instead of DSL or Python   Lua is extremely lightweight, clean, and embeddable. The syntax stays minimal, but flexible enough to express complex geometry.</li> <li>OCCT instead of CGAL   OpenCascade (OCCT) supports advanced CAD operations out-of-the-box: NURBS, splines, sewing, STL repair, STEP import/export, and robust boolean operations.</li> <li>Concise API   Less boilerplate. You write fewer lines of code to create useful parts, thanks to a functional, high-level Lua interface.</li> <li>3D printing in mind   Threads, chamfers, fillets, and pipe transitions are provided as first-class tools, optimized for additive workflows.</li> <li>Fast iteration   Edit your script, save, and instantly preview in the built-in viewer.</li> </ul>"},{"location":"introduction/#compared-to-openscad","title":"Compared to OpenSCAD","text":"<ul> <li>\u2705 General-purpose Lua instead of a limited DSL.</li> <li>\u2705 OpenCascade kernel instead of CGAL including advanced CAD features.</li> <li>\u2705 Extensible: full Lua logic, not just CAD expressions.</li> </ul>"},{"location":"introduction/#compared-to-cadquery","title":"Compared to CadQuery","text":"<ul> <li>\u2705 Same OCCT kernel, so geometry robustness is comparable.</li> <li>\u2705 Simplified API: high-level operations only, no complex OCCT internals exposed.</li> <li>\u2705 Lightweight runtime: Lua has almost no dependencies.</li> <li>\u2705 Easier for scripting and automation, without requiring the full Python ecosystem.</li> </ul> <p>In short:</p> <ul> <li>OpenSCAD is approachable but limited.</li> <li>CadQuery is powerful but heavy.</li> <li>CodeCAD is the sweet spot: simple, lightweight, parametric, yet backed by industrial-grade geometry.</li> </ul>"},{"location":"introduction/#why-lua","title":"Why Lua?","text":"<ul> <li>\ud83d\udc1a Minimal \u2013 a tiny language with no extra baggage.</li> <li>\ud83d\udce6 Embeddable \u2013 runs anywhere, integrates into services and apps easily.</li> <li>\ud83e\udde9 Customizable \u2013 the Lua API can evolve into a domain-specific CAD language.</li> </ul> <p>Lua keeps CodeCAD approachable for beginners, while being powerful for advanced users.</p>"},{"location":"introduction/#who-is-codecad-for","title":"Who is CodeCAD for?","text":"<ul> <li>\ud83e\uddd1\u200d\ud83d\udd27 Makers \u2013 Model printable parts without a steep CAD learning curve.</li> <li>\ud83c\udfed Engineers \u2013 Prototype mechanical assemblies with real-world accuracy.</li> <li>\ud83d\udd2c Researchers \u2013 Explore geometry and algorithms in a reproducible way.</li> <li>\ud83d\udc69\u200d\ud83d\udcbb Developers \u2013 Treat CAD like code: version it, test it, and share it.</li> </ul> <p>\ud83d\udca1 CodeCAD is for those who want to think in code, design in code, and print from code.</p>"},{"location":"terminology/","title":"Terminology","text":"<p>This page is a quick translation reference between German and English terms commonly used in mechanical engineering, woodworking, and construction. It may help non-native speakers (like myself, an Austrian!) to connect terminology across both languages.</p> German English Context / Description Achse shaft / axle Rotating or stationary rod Ausfr\u00e4sung pocket Milled recess in a part Ausklinkung notch Cut-out in wood or metal Aussparung recess / cutout Indentation or opening Au\u00dfengewinde external thread Thread on the outside of a shaft Balken beam Horizontal load-bearing member Basiskreis base circle Base circle for involute profile Betonplatte concrete slab Flat massive concrete element Bewehrung reinforcement Steel reinforcement in concrete Bohle plank Thick flat wood board Bohrung hole / bore Round opening Brett board / plank Flat wood element CAD CAD (Computer-Aided Design) Computer-based design work Durchgangsloch through hole Hole that passes through entirely Explosionsdarstellung exploded view Diagram showing parts spaced apart Extrudieren extrude Create 3D shape from 2D profile Falz rebate / rabbet Step or notch in wood Fase chamfer Beveled edge treatment Fu\u00dfkreis dedendum circle Circle through gear tooth roots Gewinde thread Helical ridge for fastening Holzlatte lath Narrow wood strip, often vertical Innengewinde internal thread Thread inside a hole Kante abrunden round over / fillet Rounded edge treatment Kegelrad bevel gear Teeth on a conical surface Keilnut keyway Slot for a machine key Kontur contour Outline of a shape Kopfkreis addendum circle Circle through gear tooth tips Lager bearing Component for guiding shafts Leiste strip / batten Narrow wood strip Ma\u00df dimension Measurement of size Montage assembly Process of putting parts together Mutter nut Mating part for a bolt/screw Nut groove Linear recess or channel Nut und Feder tongue and groove Interlocking board joint Passfeder key (machine element) Fits in keyway for torque transfer Pfosten post / column Vertical support element Polygonzug polyline Connected sequence of lines Profil profile Cross-section shape Rahmen frame Structural framework Rotationsk\u00f6rper revolve Shape created by rotating a profile Sackloch blind hole Hole that does not go through Schlitz slot Elongated opening Schneckenrad worm gear Screw-and-wheel drive Schraube screw General fastening element Schwalbenschwanz dovetail joint Interlocking wood joint Sechskantschraube hex bolt Screw with hexagonal head Senkung countersink Conical recess for screw head Spannvorrichtung clamp / fixture Device to hold workpiece Steigung (Gewinde) pitch Distance between thread crests Stirnrad spur gear Teeth parallel to axis Sto\u00df butt joint End-to-end joint St\u00fcckliste bill of materials (BOM) List of all parts in a build St\u00fctze support / post / pillar Vertical load-bearing member Sweeping sweep Extrusion along a path Teilkreis pitch circle Reference circle for tooth spacing Toleranz tolerance Allowable size deviation Traverse crossbar Cross connection element Tr\u00e4ger girder Large primary beam Unterlegscheibe washer Flat disk to distribute load Vorrichtung jig / fixture Tool for guiding a work process Werkst\u00fcck workpiece The piece being worked on Zahn tooth Single tooth of a gear Zahnrad gear General toothed wheel Zapfen pin / journal Axle stub or positioning pin Zapfenverbindung mortise and tenon joint Classic wood joinery \u00dcberblattung lap joint Overlapping joint"}]}